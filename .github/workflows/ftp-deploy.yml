name: üöÄ FTP Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–µ–ø–ª–æ–π –≤—Ä—É—á–Ω—É—é

jobs:
  deploy:
    name: üìÇ Deploy Website
    runs-on: ubuntu-latest
    timeout-minutes: 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –∑–∞–¥–∞—á–∏ –¥–æ 30 –º–∏–Ω—É—Ç
    
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞
      
      # === –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ===
      - name: üßπ Cleanup before deploy
        run: |
          # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –ø–µ—Ä–µ–¥–∞—á–∏
          if [ -d "node_modules" ]; then rm -rf node_modules; fi
          if [ -d ".git" ]; then rm -rf .git; fi
          if [ -d ".github" ]; then rm -rf .github; fi
          find . -name "*.log" -type f -delete
          find . -name "*.tmp" -type f -delete
          find . -name ".DS_Store" -type f -delete
      
      # === FTP –º–µ—Ç–æ–¥ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ ===
      - name: üì§ Deploy using FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftp
          port: 21
          timeout: 600000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 –º–∏–Ω—É—Ç
          local-dir: ./    # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
          server-dir: /    # –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          dangerous-clean-slate: false  # –ù–µ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.github/**
            **/vendor/**
            composer.json
            composer.lock
            README.md
            .gitignore
            deployment-report.md
            **/testcode/**
            includes/config/db_config.php
            test-ftp-connection.php
            test-sftp-connection.php
            **/*.log
            **/*.tmp
            **/.DS_Store
          log-level: verbose  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

      # === –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π FTP –¥–µ–ø–ª–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± FTP-–¥–µ–ø–ª–æ—è ===
      - name: üì§ Retry with alternative method
        if: failure()  # –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –Ω–µ —É–¥–∞–ª—Å—è
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /

      # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–µ–ø–ª–æ–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
      - name: üìù Create Deployment Summary
        if: success()
        run: |
          echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" >> $GITHUB_STEP_SUMMARY

# === –ú–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤—ã–π –¥–µ–ø–ª–æ–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤) ===
# name: üöÄ Chunked FTP Deploy
# 
# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:
# 
# jobs:
#   deploy:
#     name: üìÇ Deploy Website in Chunks
#     runs-on: ubuntu-latest
#     timeout-minutes: 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 –º–∏–Ω—É—Ç
#     
#     steps:
#       - name: üõí Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 1  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
#       
#       # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
#       - name: üßπ Cleanup before deploy
#         run: |
#           # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
#           if [ -d "node_modules" ]; then rm -rf node_modules; fi
#           if [ -d ".git" ]; then rm -rf .git; fi
#           if [ -d ".github" ]; then rm -rf .github; fi
#           find . -name "*.log" -type f -delete
#           find . -name "*.tmp" -type f -delete
#           find . -name ".DS_Store" -type f -delete
#       
#       # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
#       - name: üì¶ Split files into chunks
#         run: |
#           mkdir -p chunks
#           # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
#           total_files=$(find . -type f | wc -l)
#           # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 100 —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ)
#           chunk_size=100
#           # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç—ã —Ñ–∞–π–ª–æ–≤
#           find . -type f | split -l $chunk_size - chunks/filelist_
#           # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
#           echo "Created $(ls chunks/ | wc -l) file chunks with max $chunk_size files each from total $total_files files"
#       
#       # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç —Ñ–∞–π–ª–æ–≤
#       - name: üì§ Upload files in chunks
#         run: |
#           # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
#           for chunk in chunks/filelist_*; do
#             echo "Processing chunk $chunk..."
#             # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
#             mkdir -p current_chunk
#             # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
#             while IFS= read -r file; do
#               # –°–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
#               mkdir -p "current_chunk/$(dirname "$file")"
#               # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
#               cp "$file" "current_chunk/$file"
#             done < "$chunk"
#             
#             # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ FTP
#             echo "Uploading chunk..."
#             curl --connect-timeout 60 --retry 5 --retry-delay 10 \
#               --ftp-create-dirs \
#               -T "current_chunk/." \
#               -u "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
#               ftp://${{ secrets.FTP_SERVER }}/
#               
#             # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
#             rm -rf current_chunk
#             echo "Chunk $chunk uploaded."
#           done
#       
#       - name: üìù Create Deployment Summary
#         if: success()
#         run: |
#           echo "## üöÄ Chunked Deployment Successful!" >> $GITHUB_STEP_SUMMARY
#           echo "**Deployed:** $(date)" >> $GITHUB_STEP_SUMMARY

# === SFTP –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ –≤–∞—à —Ö–æ—Å—Ç–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SFTP) ===
# name: üöÄ SFTP Deploy
# 
# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:
# 
# jobs:
#   deploy:
#     name: üìÇ Deploy Website via SFTP
#     runs-on: ubuntu-latest
#     timeout-minutes: 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 –º–∏–Ω—É—Ç
#     
#     steps:
#       - name: üõí Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 1  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
#       
#       # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
#       - name: üßπ Cleanup before deploy
#         run: |
#           # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
#           if [ -d "node_modules" ]; then rm -rf node_modules; fi
#           if [ -d ".git" ]; then rm -rf .git; fi
#           if [ -d ".github" ]; then rm -rf .github; fi
#           find . -name "*.log" -type f -delete
#           find . -name "*.tmp" -type f -delete
#           find . -name ".DS_Store" -type f -delete
#       
#       - name: üì§ Deploy using SFTP
#         uses: wlixcc/SFTP-Deploy-Action@v1.2.4
#         with:
#           username: ${{ secrets.FTP_USERNAME }}
#           server: ${{ secrets.FTP_SERVER }}
#           port: 22
#           password: ${{ secrets.FTP_PASSWORD }}  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–∞—Ä–æ–ª—å
#           # ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ SSH-–∫–ª—é—á (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
#           local_path: ./
#           remote_path: /
#           delete_remote_files: false
#           exclude: ".git*,.github*,node_modules,vendor,composer.json,composer.lock,README.md,.gitignore,deployment-report.md,testcode,includes/config/db_config.php,test-ftp-connection.php,test-sftp-connection.php,*.log,*.tmp,.DS_Store"
# 
#       - name: üìù Create Deployment Summary
#         if: success()
#         run: |
#           echo "## üöÄ SFTP Deployment Successful!" >> $GITHUB_STEP_SUMMARY
#           echo "**Branch:** $(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')" >> $GITHUB_STEP_SUMMARY
#           echo "**Deployed:** $(date)" >> $GITHUB_STEP_SUMMARY
#           echo "**Commit:** $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" >> $GITHUB_STEP_SUMMARY 